// --> LIBRARIES
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
#include <virtuabotixRTC.h>
#include <Servo.h>
#include <DHT.h>
#include <DHT_U.h>
#include "dht.h"
#include <SoftwareSerial.h>

// --> DEFINES AND CONSTANT
Servo myservo;
#define DHTPIN 9     
#define DHTTYPE DHT11
LiquidCrystal_I2C lcd(0x27, 16, 2);
virtuabotixRTC myRTC(6, 7, 8);  //Wiring SCLK -> 6, I/O -> 7, CE -> 8
                                //Or CLK -> 6 , DAT -> 7, Reset -> 8
DHT dht(DHTPIN, DHTTYPE);

SoftwareSerial mySerial(10, 11);

// --> GLOBAL VARIABLES
const int relayPin1 = 3; // FAN
const int relayPin2 = 4; // BULB
const int relayPin3 = 12; // PTC

//Servo and RTC                               
int pos;
const int servo = 5; // SERVO

int upButton = A2;
int downButton = A1;
int selectButton = A0;

const unsigned long eventInterval = 1000; //MILLIS FUNCTIONS
unsigned long previousTime = 0;

int menuPreset = 1;
int menu = 1;
int x = EEPROM.read(257);

int subDate = EEPROM.read(50);
int subDate16 = EEPROM.read(52);
int subDate22 = EEPROM.read(53);
int subDateTwo = EEPROM.read(51);
int day = EEPROM.read(54);

const int pirPin = 2;
int count;

//first turn of the day;
const int onHourF = 0; //SET TIME TO ON RELAY (24 HOUR FORMAT)
const int onMinsF = 0;
//Second turn of the day
const int onHourS = 6;
const int onMinsS = 0;
//Third turn of the day
const int onHourT = 12;
const int onMinsT = 0;
//Fourth turn of the day
const int onHourFth = 18;
const int onMinsFth = 0;

// --> USER DEFINED FUNCTIONS
void preset();
void execetuteActionPreset();
void updateMenuPreset();
void yesAction();
void noAction();

void updateMenu();
void executeAction();
void action1();
void action2();

void updateMenu2();
void executeAction2();
void action11();
void action22();

void sendMessage();

// --> SETUP()
void setup() {
  myservo.attach(5);
  pinMode(relayPin1, OUTPUT);
  pinMode(relayPin2, OUTPUT);
  pinMode(relayPin3, OUTPUT);
  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(5, 0);
  lcd.print("WELCOME");
  pinMode(upButton, INPUT_PULLUP);
  pinMode(downButton, INPUT_PULLUP);
  pinMode(selectButton, INPUT_PULLUP);
  pinMode(pirPin, INPUT);
  delay(2000);
 
  //myRTC.setDS1302Time(00, 16, 9, 6, 1, 4, 2022);
  myRTC.updateTime();

  if (EEPROM.r6ead(257) == 1){
    lcd.clear();
    lcd.print("Currently");
    lcd.setCursor(0, 1);
    lcd.print("Hatching");
    delay(2000);
  }
  else{
    updateMenu2();
    while(x == 0){
    if (!digitalRead(downButton)){
      menuPreset++;
      updateMenuPreset();
      delay(100);
      while(!digitalRead(downButton));
    }
    if (!digitalRead(upButton)){
    menuPreset--;
    updateMenuPreset();
    delay(100);
    while(!digitalRead(upButton));
    }
    if (!digitalRead(selectButton)){
    executeActionPreset();
    delay(100);
    while (!digitalRead(selectButton));
     }
    }  
   }
  dht.begin();
  lcd.clear();
  if(EEPROM.read(257) == 1){
    updateMenu();
  }
  else{
    updateMenu2();
  }
}

// -- LOOP()
void loop() {
  myRTC.updateTime();
  //eeprom = 1
  if (EEPROM.read(257) == 1){
   if (!digitalRead(downButton)){
    menu++;
    updateMenu();
    delay(10);
   }
   if (!digitalRead(upButton)){
    menu--;
    updateMenu();
    delay(10);
   }
   if (!digitalRead(selectButton)){
    executeAction();
    updateMenu();
    delay(10);
   }
   //millis
   unsigned long currentTime = millis();
   if(currentTime - previousTime >= eventInterval){
    //Servo & RTC
      if(subDate <= subDate16){ //29 <= 45
        if(subDateTwo == myRTC.dayofmonth){ //29 == 29
          while(((onHourF == myRTC.hours)&&(onMinsF == myRTC.minutes)) || ((onHourS == myRTC.hours)&&(onMinsS == myRTC.minutes)) || ((onHourT == myRTC.hours)&&(onMinsT == myRTC.minutes)) || ((onHourFth == myRTC.hours)&&(onMinsFth == myRTC.minutes))){
            for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
            // in steps of 1 degree
            myservo.write(pos);              // tell servo to go to position in variable 'pos'
            delay(10);                       // waits 15 ms for the servo to reach the position
            }
            lcd.clear();
            lcd.print("Current Position: 180'");                                                                 
            delay(3000);
            for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
            myservo.write(pos);              // tell servo to go to position in variable 'pos'
            delay(10);                       // waits 15 ms for the servo to reach the position
            }
            lcd.clear();
            lcd.print("Current Position: 180'"); 
            delay(3000);
            myRTC.updateTime();
          }   
          delay(10); 
          int pos = 90;
          myservo.write(pos);         
        } //subDateTwo == myRTC.dayofmonth
        else{
          subDateTwo = myRTC.dayofmonth; // 30 == 11
          EEPROM.write(51, subDateTwo); //subdateTwo
          subDate++;
          EEPROM.write(50, subDate); //subDate
          day++;
          EEPROM.write(54, day); //day++           
        }
      } //subDate <= subDate16
      if ((subDate <= subDate22) && (subDate >= subDate16)) {
        int motion = digitalRead(pirPin);

        if (motion){
          count++;
        }
        if (count > 3){
          sendMessage();
        }
      }//servo and rtc
    previousTime += eventInterval;
   } //milis
     //sensors (dht)
      delay(5);
      float h = dht.readHumidity();                        // Reading temperature or humidity takes about 250 milliseconds!
      float t = dht.readTemperature();                     // Read temperature as Celsius (the default)
      float f = dht.readTemperature(true);                 // Read temperature as Fahrenheit (isFahrenheit = true)   
      if (isnan(h) || isnan(t) || isnan(f)) {
        lcd.clear();
        lcd.print("Failed to read from DHT sensor!");  // Check if any reads failed and exit early (to try again).
        return;
      }
      float hif = dht.computeHeatIndex(f, h);              // Compute heat index in Fahrenheit (the default)
      float hic = dht.computeHeatIndex(t, h, false);

      if(f > 101){
       digitalWrite(relayPin1, HIGH);
       digitalWrite(relayPin2, HIGH);
       digitalWrite(relayPin3, HIGH);
       }
       else if(f <= 99){
       digitalWrite(relayPin1, LOW);
       digitalWrite(relayPin2, LOW);
       digitalWrite(relayPin3, LOW);
       }
  } //eeprom = 1
  // ------------------------------------------------------------//
  else { //eeprom == 0
    lcd.clear(); 
    updateMenu2();
  
    while(EEPROM.read(257) == 0){
      if (!digitalRead(downButton)){
        menu++;
        updateMenu2();
        delay(100);
      }
      if (!digitalRead(upButton)){
        menu--;
        updateMenu2();
        delay(100);
      }
      if (!digitalRead(selectButton)){
        executeAction2();
        updateMenu2();
        delay(100);
     }
       //sensors (dht)
      delay(5);
      float h = dht.readHumidity();                        // Reading temperature or humidity takes about 250 milliseconds!
      float t = dht.readTemperature();                     // Read temperature as Celsius (the default)
      float f = dht.readTemperature(true);                 // Read temperature as Fahrenheit (isFahrenheit = true)   
      if (isnan(h) || isnan(t) || isnan(f)) {
        lcd.clear();
        lcd.print("Failed to read from DHT sensor!");  // Check if any reads failed and exit early (to try again).
        return;
      }
      float hif = dht.computeHeatIndex(f, h);              // Compute heat index in Fahrenheit (the default)
      float hic = dht.computeHeatIndex(t, h, false);

      if(f > 101){
       digitalWrite(relayPin1, HIGH);
       digitalWrite(relayPin2, HIGH);
       digitalWrite(relayPin3, HIGH);
       }
       else if(f <= 99){
       digitalWrite(relayPin1, LOW);
       digitalWrite(relayPin2, LOW);
       digitalWrite(relayPin3, LOW);
       }
    }
  }//eeprom = 0 
} // --> END LOOP

// --> USER DEFINED FUNCTIONS
void preset(){
  x = 1;
  EEPROM.write(257, x);
  delay(50);
  myRTC.updateTime();
  subDate = myRTC.dayofmonth; //29 = 29
  EEPROM.write(50, subDate); //subdate
  subDateTwo = subDate; //29 = 29
  EEPROM.write(51, subDateTwo); //subdateTwo
  subDate16 = subDate + 16; //29 + 16 = 45
  EEPROM.write(52, subDate16); //subdate18
  subDate22 = subDate + 22; // 29 + 22 = 51
  EEPROM.write(53, subDate22); // subdate22
  day = 0; //subdate
  EEPROM.write(54, day);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Timer has started");
  delay(2000);
}

void updateMenuPreset(){
 switch (menuPreset) {
  case 0:
      menuPreset = 1;
      break;
    case 1:
      lcd.clear();
      lcd.print("Make a new timer? ");
      lcd.setCursor(0, 1);
      lcd.print(">Yes");
      lcd.print(" No");
      break;
    case 2:
      lcd.clear();
      lcd.print("Make a new timer? ");
      lcd.setCursor(0, 1);
      lcd.print(" Yes");
      lcd.print(">No");
      break;
    case 3:
      menuPreset = 2;
      break;
  }
}

void executeActionPreset(){
  switch (menuPreset) {
    case 1:
      yesAction();
      break;
    case 2:
      noAction();
      break;
  }
}

void yesAction(){
  lcd.clear();
  lcd.print("creating preset");
  delay(10);
  preset();
  delay(1000);
  lcd.clear();
  lcd.print("press any button to continue");
  delay(100);
}
void noAction(){
  lcd.clear();
  lcd.print("No Timer");
  x = 1;
  delay(1000);
  lcd.clear();
  lcd.print("Proceed to main menu");
  lcd.setCursor(0, 1);
  lcd.print("press any button to continue");
  delay(500);
}

void updateMenu() {
  switch (menu) {
    case 0:
      menu = 1;
      break;
    case 1:
      lcd.clear();
      lcd.print("Day: ");
      lcd.print(day);
      lcd.setCursor(0, 1);
      lcd.print(">show ");
      lcd.print(" rst");
      break;
    case 2:
      lcd.clear();
      lcd.print("Day: ");
      lcd.print(day);
      lcd.setCursor(0, 1);
      lcd.print(" show");
      lcd.print(" >rst");
      break;
    case 3:
      menu = 2;   
      break;
  }
}

void executeAction() {
  switch (menu) {
    case 1:
      action1();
      break;
    case 2:
      action2();
      break;
  }
}

void action1() {
 delay(10);
 float h = dht.readHumidity();                        
 float t = dht.readTemperature();                     
 float f = dht.readTemperature(true);                    
 if (isnan(h) || isnan(t) || isnan(f)) {
  lcd.clear();
  lcd.print("Failed to read from DHT sensor!");  
  return;
  }
  
 float hif = dht.computeHeatIndex(f, h);              
 float hic = dht.computeHeatIndex(t, h, false); 

 myRTC.updateTime();
 lcd.clear();
 lcd.print(myRTC.hours);
 lcd.print(":");
 lcd.print(myRTC.minutes);
 lcd.print(":");
 lcd.print(myRTC.seconds);
 /*lcd.print("|");
 lcd.print(subDate);
 lcd.print("|");
 lcd.print(subDate16);
 lcd.print("|");
 lcd.print(subDateTwo);
 lcd.print("|");
 lcd.print(subDate22);*/
 lcd.setCursor(0, 1);
 lcd.print("T: ");
 lcd.print(t);
 lcd.print("H: ");
 lcd.print(h);
 
 delay(5000);
}

void action2() {
  lcd.clear();
  lcd.print("Resetting Timer");
  delay(3000);
  x = 0;
  EEPROM.write(257, x);
  subDate = 0;
  EEPROM.write(50, subDate);
  subDate16 = 0;
  EEPROM.write(51, subDate16);
  subDate22 = 0;
  EEPROM.write(53, subDate22);
  subDateTwo = 0;
  EEPROM.write(52, subDateTwo);
  delay(500);
  lcd.clear();
  lcd.print("Complete");
  delay(2000);
}

void updateMenu2() {
   switch (menu) {
    case 0:
      menu = 1;
      break;
    case 1:
      lcd.clear();
      lcd.print("No Timer");
      lcd.setCursor(0, 1);
      lcd.print(">show ");
      lcd.print(" make");
      break;
    case 2:
      lcd.clear();
      lcd.print("No Timer");
      lcd.setCursor(0, 1);
      lcd.print(" show");
      lcd.print(" >make");
      break;
    case 3:
      menu = 2;
      break;
  }
}

void executeAction2() {
  switch (menu) {
    case 1:
      action11();
      break;
    case 2:
      action22();
      break;
  }
}

void action11(){
   delay(50);
 float h = dht.readHumidity();                        
 float t = dht.readTemperature();                     
 float f = dht.readTemperature(true);                    
 if (isnan(h) || isnan(t) || isnan(f)) {
  lcd.clear();
  lcd.print("Failed to read from DHT sensor!");  
  return;
  }
  
 float hif = dht.computeHeatIndex(f, h);              
 float hic = dht.computeHeatIndex(t, h, false); 
 
 lcd.clear();
 lcd.print("H: ");
 lcd.print(h);
 lcd.setCursor(0, 1);
 lcd.print("T: ");
 lcd.print(t);
 delay(3000);
}

void action22(){
  lcd.clear();
  lcd.print("creating preset");
  delay(500);
  preset();
  x = 1;
  EEPROM.write(257, x);
  delay(1000);
  lcd.clear();
  lcd.print("To proceed");
  lcd.setCursor(0, 1);
  lcd.print("press up/down button to continue");
  delay(500);
}

void sendMessage()
{
  mySerial.println("AT+CMGF=1");    //Sets the GSM Module in Text Mode
  delay(1000);  // Delay of 1000 milli seconds or 1 second
  mySerial.println("AT+CMGS=\"+639204078013\"\r"); // Replace x with mobile number
  delay(1000);
  mySerial.println("The PIR Sensor has detected several movements inside the incubator. Please check it.");// The SMS text you want to send
  delay(100);
  mySerial.println((char)26);// ASCII code of CTRL+Z
  delay(1000);
}
